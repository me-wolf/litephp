<?php
namespace LITE;

/**
 * default controller prototype
 * Class Controller
 * @package LITE
 */
abstract class Controller extends Router{
	/**
	 * @var Controller
	 */
	private static $controller;

	/**
	 * get current controller instance
	 * @return Controller
	 */
	public static function getCurrentControllerInstance(){
		return self::$controller;
	}

	/**
	 * check config path exists
	 * @param $path
	 * @return bool
	 */
	public static function checkPathExists($path){
		$app_path = Config::get('app/path');
		$controller_path = $app_path.DS.'controller'.DS;
		return is_dir($controller_path.$path);
	}

	/**
	 * dispatch controller
	 * @throws Exception
	 * @return mixed
	 */
	public static function dispatch(){
		$controller = self::getController();
		$action = self::getAction();
		$get = self::get();
		$post = self::post();

		$cn = 'Controller_'.ucfirst($controller);
		$ctrl = new $cn($controller, $action);

		self::$controller = $ctrl;

		//support some class non extends lite\controller
		if(method_exists($ctrl, '__beforeExecute')){
			$cancel = $ctrl->__beforeExecute($controller, $action);
			if($cancel === false){
				die;
			}
		}

		if(!method_exists($ctrl, $action)){
			throw new Exception('controller method no exists: '.$controller.'/'.$action);
		}

		if(Config::get('app/auto_process_logic_error')){
			try {
				$result = call_user_func(array($ctrl, $action), $get, $post);
			} catch(Exception $ex){
				$result = new Result($ex->getMessage(), false, $ex);
			}
		} else {
			$result = call_user_func(array($ctrl, $action), $get, $post);
		}

		if(method_exists($ctrl, '__afterExecute')){
			$ctrl->__afterExecute($controller, $action, $result);
		}
		return $result;
	}

	public function __construct(){
		//ignore error
	}

	/**
	 * before controller execute
	 * return false to cancel current dispatch
	 */
	public function __beforeExecute($controller, $action){
		return true;
	}

	/**
	 * after controller method execute
	 */
	public function __afterExecute($controller, $action, $result=null){

	}
}