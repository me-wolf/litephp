<?php
use LITE\Result;
use LITE\Filter;
use LITE\Paginate;
use LITE\Exception;
use LITE\DB_Model;

class Controller_Admin extends Controller_Base {
	public function index() {
		$this->jumpTo('admin/showUserList');
	}

	public function login($get, $post) {
		if($post){
			$result = Filter::init()->filteArray($post, array(
				'name' => array(
					'REQUIRE' => 'name require'
				),
				'password' => array(
					'REQUIRE' => 'password require'
				)
			));
			if(!empty($result)){
				$msg = array_pop($result);
				return new Result($msg);
			}

			$admin = Model_Admin::find('admin_name=?', $post['name'])->one();

			if($admin && $admin->password == md5($post['password'])){
				if($admin->is_del){
					return new Result('当前账户已被禁用');
				}
				$admin->last_ip = get_ip();
				$admin->last_time = date('Y-m-d H:i:s');
				$admin->save();

				$result = Model_Access::instance()->login($admin->toArray());
				if($result){
					return new Result('登录成功', true, null, $this->getUrl());
				}
			}
			return new Result('登录失败，请检查您的用户名和密码是否正确');
		}
	}

	public function logout() {
		Model_Access::instance()->logout();
		$this->login_user = null;
		return new Result('退出成功', true, null, $this->getUrl('admin/login'));
	}

	public function showUserList($search) {
		$cond = '1=1';
		if(strlen($search['kw'])){
			$cond .= ' AND admin_name LIKE \'%' . addslashes($search['kw']) . '%\'';
		}
		if($search['role_id']){
			$cond .= ' AND role_id = ' . (int)$search['role_id'];
		}

		$page = Paginate::instance();
		$page->setPageSize(15);

		$role_list = Model_AdminRole::find()->all(true);
		$role_list = array_group($role_list, 'id', true);

		$admin_list = Model_Admin::find($cond)->order('create_time DESC')->paginate($page);

		return array(
			'search' => $search,
			'page' => $page,
			'user_list' => $admin_list,
			'role_list' => $role_list
		);
	}

	public function updateUser($get, $post) {
		$id = (int)$get['id'];
		$user = $id ? Model_Admin::findOneByPk($id) : new Model_Admin();

		if($post){
			try {
				if(!$id){
					if($post['password']){
						$post['password'] = md5($post['password']);
					}
					if(Model_Admin::find('admin_name=?', $post['admin_name'])->count()){
						return new Result('该用户名已经存在');
					}
				}
				else {
					if(Model_Admin::find('admin_name=? AND id!=?', $post['admin_name'], $user->id)->count()){
						return new Result('该用户名已经存在');
					}
					if(empty($post['password'])){
						$post['password'] = $user->password;
					}
					else {
						$post['password'] = md5($post['password']);
					}
				}
				$user->setValues($post);
				$result = !!$user->save();
			} catch(Exception $ex){
				return new Result($ex->getMessage());
			}
			return new Result($result ? '操作成功' : '操作失败，请重试', $result, null, $result ? $this->getUrl('admin/showUserList') : null);
		}

		$role_list = Model_AdminRole::find()->all(true);
		return array(
			'role_list' => $role_list,
			'user' => $user
		);
	}

	public function deleteUser($get) {
		$current_id = Model_Access::instance()->getLoginUserId();
		$id = (int)$get['id'];
		$result = false;
		if($id){
			if($current_id == $id){
				return new Result('您不能对自己账号操作');
			}
			$user = Model_Admin::findOneByPk($id);
			if($user){
				$result = $user->delete();
			}
		}
		return new Result($result ? '操作成功' : '操作失败', $result);
	}

	public function enableUser($get) {
		$id = (int)$get['id'];
		return $this->updateUserState($id, true);
	}

	public function disableUser($get) {
		$id = (int)$get['id'];
		return $this->updateUserState($id, false);
	}

	public function updateUserState($get) {
		$id = (int)$get['id'];
		$toState = (int)$get['toState'];
		if($id){
			$current_id = Model_Access::instance()->getLoginUserId();
			if($current_id == $id){
				return new Result('您不能对自己账号操作1');
			}
			$result = Model_Admin::updateByPk($id, array(
				'is_del' => $toState ? 0 : 1
			));
			if($result){
				return new Result('操作成功', true, null, $this->getUrl('admin/showUserList'));
			}
		}
		return new Result('操作失败，请稍候重试2');
	}

	public function showRoleList() {
		$role_list = Model_AdminRole::find()->all(true);
		if(!empty($role_list)){
			foreach($role_list as $key => $role){
				$role['default_type'] = (int)$role['default_type'];
				$role_list[$key]['default_type_txt'] = Model_AdminRole::$default_type_list[$role['default_type']];
			}
		}
		return array(
			'role_list' => $role_list
		);
	}

	public function deleteRole($get) {
		$id = (int)$get['id'];
		$result = Model_AdminRole::delByPk($id);
		return new Result($result ? '操作成功' : '操作失败，请重试', $result, null, $result ? $this->getUrl('admin/showRoleList') : null);
	}

	public function updateRoleState($get) {
		$id = (int)$get['id'];
		$toState = $get['toState'];

		$result = !!Model_AdminRole::updateByPk($id, array(
			'is_del' => $toState ? '1' : 0
		));
		return new Result($result ? '操作成功' : '操作失败，请重试', $result, null, $result ? $this->getUrl('admin/showRoleList') : null);
	}

	public function updateRole($get, $post) {
		$id = (int)$get['id'];
		$role = $id ? Model_AdminRole::findOneByPk($id) : new Model_AdminRole();
		if($post){
			try {
				if(!$id){
					if(Model_AdminRole::find('name=?', $post['name'])->count()){
						return new Result('该角色已经存在');
					}
				}
				else {
					if(Model_AdminRole::find('name=? AND id!=?', $post['name'], $role->id)->count()){
						return new Result('该用户名已经存在');
					}
				}
				$role->setItems($post);
				$result = !!$role->save();
			} catch(Exception $ex){
				return new Result($ex->getMessage());
			}
			return new Result($result ? '操作成功' : '操作失败，请重试', $result, null, $result ? $this->getUrl('admin/showRoleList') : null);
		}

		return array(
			'default_type_list' => Model_AdminRole::$default_type_list,
			'role' => $role
		);
	}

	/**
	 * pv统计
	 */
	public function pvStatic($search){
		$search['start_time'] = $search['start_time'] ?: date('Y-m-d 00:00:00', time()-86400*5);
		$search['end_time'] = $search['end_time'] ?: date('Y-m-d H:i:s');
		$st = strtotime($search['start_time']);
		$et = strtotime($search['end_time']);

		$tmp = array_keys($this->app_list);
		$search['app'] = array_shift($tmp);
		$tmp = array_keys($this->platform_list);
		$search['platform'] = array_shift($tmp);
		$search['catalog'] = $search['catalog'] ?: 'home_page';

		$cond = "add_time > '$st' AND add_time <= '$et'";
		if($search['app']){
			$cond .= " AND app = '{$search['app']}'";
		}
		if($search['platform']){
			$cond .= " AND platform = '{$search['platform']}'";
		}
		if($search['kw']){
			$cond .= " AND catalog LIKE '%{$search['kw']}%'";
		}
		if($search['catalog']){
			$cond .= " AND catalog = '{$search['catalog']}'";
		}

		$tmp = Model_Pv::find('app=? AND platform=?', $search['app'], $search['platform'])->field('catalog')->cache(300)->group('catalog')->all(true);
		$all_catalog = array_keys(array_group($tmp, 'catalog'));

		$data = Model_Pv::find($cond)->field('id,uid,add_time')->all(true);
		$day_counts = array();
		array_walk($data, function(&$item)use(&$day_counts){
			$item['spc_hour'] = date('m/d/H', $item['add_time']);
			$item['spc_day'] = date('m/d', $item['add_time']);
			$day_counts[date('m/d', $item['add_time'])] += 1;
		});

		$pv_list = array_group($data, 'spc_hour');
		$uv_list = array();
		array_walk($pv_list, function(&$item, $key)use(&$uv_list){
			$uv_count = 0;
			$tmp = array();
			foreach($item as $i){
				if(empty($i['uid'])){
					$uv_count++;
				} else {
					if(!$tmp[$i['uid']]){
						$uv_count++;
					}
				}
				$tmp[$i['uid']] = true;
			}
			$uv_list[$key] = $uv_count;
			$item = count($item);
		});
		ksort($uv_list);
		ksort($pv_list);

		$seris = array(
			array(
				'name' => 'PV',
				'data' => array_values($pv_list)
			),
			array(
				'name' => 'UV',
				'data' => array_values($uv_list)
			)
		);
		$categories = array_keys($pv_list);


		$pv_list_day = array_group($data, 'spc_day');
		$uv_list_day = array();
		array_walk($pv_list_day, function(&$item, $key)use(&$uv_list_day){
			$uv_count = 0;
			$tmp = array();
			foreach($item as $i){
				if(empty($i['uid'])){
					$uv_count++;
				} else {
					if(!$tmp[$i['uid']]){
						$uv_count++;
					}
				}
				$tmp[$i['uid']] = true;
			}
			$uv_list_day[$key] = $uv_count;
			$item = count($item);
		});
		ksort($uv_list_day);
		ksort($pv_list_day);

		$seris_day = array(
			array(
				'name' => 'PV',
				'data' => array_values($pv_list_day)
			),
			array(
				'name' => 'UV',
				'data' => array_values($uv_list_day)
			)
		);
		$categories_day = array_keys($pv_list_day);

		return array(
			'all_catalog' => $all_catalog,
			'seris' => $seris,
			'categories' => $categories,
			'seris_day' => $seris_day,
			'categories_day' => $categories_day,
			'search' => $search,
			'platform_list' => $this->platform_list,
			'app_list' => $this->app_list
		);
	}

	private function getLogCss($log){
		if(in_array($log['level'], array('e','f','s')) && in_array($log['state'], array('0', '1'))){
			return 'danger';
		}
		if(in_array($log['level'], array('w')) && in_array($log['state'], array('0', '1'))){
			return 'warning';
		}
		if($log['state'] == 2){
			return 'success';
		}
		if($log['level'] == 'i' || $log['level'] == 'd'){
			return 'info';
		}
		return '';
	}

	/**
	 * log
	 */
	public function logStatic($search){
		//有序！
		$level_map = array(
			'v' => 'verbose',
			'd' => 'debug',
			'i' => 'info',
			'w' => 'warning',
			'e' => 'error',
			'f' => 'fatal',
			's' => 'slient'
		);
		if(!isset($search['level'])){
			$search['level'] = 'w';
		} else {
			$search['level'] = $search['level'] ?: 'v';
		}
		$search['start_time'] = $search['start_time'] ?: date('Y-m-d 00:00:00', time()-86400*3);
		$search['end_time'] = $search['end_time'] ?: date('Y-m-d H:i:s');

		$cond = "datetime > '{$search['start_time']}' AND datetime <= '{$search['end_time']}'";
		if($search['tag']){
			$cond .= " AND tag LIKE '%{$search['tag']}%'";
		}
		if($search['kw']){
			$cond .= " AND (file LIKE '%{$search['kw']}%' OR content LIKE '%{$search['kw']}%')";
		}

		//级别过滤
		if($search['level']){
			$found = false;
			$str = '';
			foreach($level_map as $k=>$v){
				if($k == $search['level']){
					$found = true;
				}
				if($found){
					$str[] = "level = '$k'";
				}
			}
			$cond .= " AND (".join(' OR ', $str).")";
		}
		$page = Paginate::instance();
		$page->setConfig(array('page_size'=>20));
		$log_list = Model_Log::find($cond)->order('datetime DESC')->paginate($page);

		foreach($log_list as &$log){
			$log['label_class'] = 'label label-'.$level_map[$log['level']];
			$log['level_txt'] = $level_map[$log['level']];
			$log['css_class'] = $this->getLogCss($log);
			$log['content_less'] = substr($log['content'], 0, 80).'...';
		}

		return array(
			'log_list' => $log_list,
			'search' => $search,
			'level_map' => $level_map,
			'page' => $page
		);
	}
}