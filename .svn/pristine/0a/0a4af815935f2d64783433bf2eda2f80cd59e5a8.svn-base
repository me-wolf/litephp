<?php
namespace LITE;
use \ArrayAccess as ArrayAccess;
use \Iterator as Iterator;

/**
 * data Property
 * @author sasumihuang
 */
abstract class DB_DAO implements Iterator, ArrayAccess{
	const SETTER_KEY_NAME = 'setter';
	const GETTER_KEY_NAME = 'getter';

	private $_properties_define = array();
	private $_filter_rules = array();

	private $_values = array();
	private $_values_change_keys = array();

	public function __construct(array $data=array()){
		$this->setValues($data);
	}

	/**
	 * 设置属性定义
	 * @param $pro_def
	 */
	public function setPropertiesDefine($pro_def){
		$this->_properties_define = $pro_def;
	}

	/**
	 * 获取属性定义
	 * @param null $key
	 * @return null
	 */
	public function getPropertiesDefine($key=null){
		if(!$key){
			return $this->_properties_define;
		}
		return $this->_properties_define[$key];
	}

	/**
	 * 设置校验过滤器
	 * @param $rules
	 */
	public function setFilterRules($rules){
		$this->_filter_rules = $rules;
	}

	/**
	 * 获取校验过滤器
	 * @return array
	 */
	public function getFilterRules(){
		return $this->_filter_rules;
	}

	/**
	 * on set Property
	 * @param $key
	 * @param $val
	 * @return boolean
	 */
	public function onBeforeSetValue($key, $val){
		return true;
	}

	/**
	 * set values
	 * @param array $data
	 */
	final public function setValues(array $data=array()){
		foreach($data as $key=>$value){
			$this->setValue($key, $value);
		}
	}

	/**
	 * set value
	 * @param $key
	 * @param $value
	 */
	final public function setValue($key, $value){
		if($this->onBeforeSetValue($key, $value) !== false){
			$this->_values[$key] = $value;
			$this->_values_change_keys[$key] = $key;
		};
	}

	/**
	 * get value by key
	 */
	final public function getValue($key){
		return $this->_values[$key];
	}

	/**
	 * get values
	 * @return array
	 */
	final public function getValues(){
		return $this->_values;
	}

	/**
	 * covert current values to array
	 * @return array
	 */
	final public function toArray(){
		return $this->_values;
	}

	/**
	 * get property change keys
	 * @return array
	 */
	protected function getValueChangeKeys(){
		return $this->_values_change_keys;
	}

	/**
	 * reset properties change state
	 * @param string $key
	 */
	public function resetValueChangeState($key=''){
		if($key){
			unset($this->_values_change_keys[$key]);
		} else {
			$this->_values_change_keys = array();
		}
	}

	/**
	 * check current object is empty
	 * @return bool
	 */
	final public function isEmpty(){
		return empty($this->_values);
	}

	/**
	 * get data size
	 * @return int
	 */
	final public function size(){
		return count($this->_values);
	}

	/**
	 * setter
	 * @param $key
	 * @param $value
	 */
	public function __set($key, $value){
		$rule = $this->getPropertiesDefine($key) ?: array();
		$setter = $rule[self::SETTER_KEY_NAME];
		if($setter){
			if(call_user_func_array($setter, array($key, $value, $this)) === false){
				return;
			};
		}
		$this->setValue($key, $value);
	}

	/**
	 * getter
	 * @param $key
	 * @return mixed
	 */
	public function __get($key){
		$rule = $this->getPropertiesDefine($key) ?: array();
		$getter = $rule[self::GETTER_KEY_NAME];
		if($getter){
			return call_user_func_array($getter, array($this));
		}
		return $this->_values[$key];
	}

	public function __isset($key){
		return isset($this->_values[$key]);
	}

	public function __unset($key){
		unset($this->_values[$key]);
	}

	final public function rewind() {
		reset($this->_values);
	}

	final public function current() {
		$var = current($this->_values);
		return $var;
	}

	final public function key() {
		$var = key($this->_values);
		return $var;
	}

	final public function next() {
		$var = next($this->_values);
		return $var;
	}

	final public function valid() {
		$var = $this->current() !== false;
		return $var;
	}

	final public function offsetSet($offset, $value) {
		if (is_null($offset)) {
			$this->_values[] = $value;
		} else {
			$this->_values[$offset] = $value;
		}
	}

	final public function offsetExists($offset) {
		return isset($this->_values[$offset]);
	}

	final public function offsetUnset($offset) {
		unset($this->_values[$offset]);
	}

	final public function offsetGet($offset) {
		return isset($this->_values[$offset]) ? $this->_values[$offset] : null;
	}
}