<?phpclass View extends Router{	private $vars = array();	private $result;	public function __construct(){		//	}	/**	 * assign vars to template	 */	public function assign($key, $val=null){		$vars = func_get_args();		if(func_num_args() > 1){			$this->vars[$vars[0]] = $vars[1];		} else {			$this->vars = $vars[0];		}		return $this;	}	/**	 * set result	 * @param CResult $result	 */	public function setResult(CResult $result){		$this->result = $result;		$data = $this->getData();		$this->assign($data);	}	public function getData(){		if($this->result){			return $this->result->getData();		}	}	/**	 * get result	 * @return CResult	 */	public function getResult(){		return $this->result;	}	/**	 * render template	 * @param string $file	 */	public function render($file=null){		if(!empty($this->vars)){			extract($this->vars);		}		if(!$file){			$file = $this->getTemplate();		}		if(file_exists($file)){			include $file;		}	}	/**	 * get template physic file location	 * @param string $file_name	 * @return string	 */	public function getTemplate($file_name=''){		$controller = self::getController();		$action = self::getAction();		if($controller == self::getDefaultController() &&			$action == self::getDefaultAction()){			return Config::get('app/tpl').'index.php';		}		return Config::get('app/tpl').strtolower($controller.'_'.$action.'.php');	}	/**	 * convert model filters to javascript filters	 */	public static function convertFilterToJavascriptFilter(array $filters=array()){		$value = '';		return json_encode($value);	}	/**	 * 构造javascript结构	 * @param string||array $js	 * @return string	 **/	public static function getJs($js/**, $js2, $js3...*/){		$args = func_get_args();		$rst = '';		foreach($args as $js){			if(gettype($js) == 'string'){				if(stripos('/', $js) === false){					$js = self::getJsUrl($js);				}				$rst .= '<script type="text/javascript" src="'.$js.'" charset="utf-8"></script>';			} else {				$sc = '<script type="text/javascript"';				foreach($js as $pro=>$val){					if(strtolower($pro) == 'src'){						$val = self::getJsUrl($val);					}					$sc .= " $pro=\"$val\"";				}				$sc .= '></script>';				$rst .= $sc;			}		}		return $rst;	}	/**	 * 构造css结构	 * @param string||array $css	 * @return string	 **/	public static function getCss($css/**, $css2, $css3...*/){		$args = func_get_args();		$rst = '';		foreach($args as $css){			if(gettype($css) == 'string'){				$rst .= '<link rel="stylesheet" type="text/css" href="'.self::getCssUrl($css).'" media="all"/>';			} else {				$lnk = '<link rel="stylesheet" type="text/css"';				foreach($css as $pro=>$val){					if(strtolower($pro) == 'href'){						$val = self::getCssUrl($val);					}					$lnk .= " $pro=\"$val\"";				}				$lnk .= '/>';				$rst .= $lnk;			}		}		return $rst;	}	public static function getConfig($key){		return Config::get($key);	}	/**	 * 输出img	 * @param string $src	 * @param array $option	 * @return string	 **/	public static function getImg($src, $option=array()){		if(!$src){			return '';		}		$exts = '';		$adjust = false;		$adjust_fun = '__img_adjust__';		foreach($option as $key=>$val){			$exts .= " $key=\"$val\"";			if(preg_match("/(minHeight|minWidth|maxHeight|maxWidth)/i", $key)){				$adjust = true;			}		}		$src = self::getImgUrl($src);		return "<img src=\"$src\"$exts".($adjust ? " onload=\"$adjust_fun\"" : "")."/>";	}	/**	 * build a form	 * @param string $url	 * @param array $fields	 * @param array $form_option	 * @return string	 **/	public static function genForm($url='', array $fields, array $form_option=array()){		$form_option = array_merge(array(				'method' => 'post',				'url' => $url,				'add_submit' => true,				'title' => '',				//container template				'container_tpl' =>				'<form action="$url" method="$method" class="$class">'.				'<fieldset>'.				'<legend>$title</legend>'.				'$fields_html'.				' $submit_html'.				'</fieldset>'.				'</form>',				'submit_html' => '<dl><dt></dt><dd><input type="submit" value="submit"/></dd></dl>',				//one field template				'field_tpl' => '<dl><dt><label for="$id">$label</label></dt><dd>$element</dd></dl>'		), $form_option);		/**		 * build attribute string for element		 * @param array $field		 * @return string		*/		$build_attr = function($field){			$supports = array('name','type','class','style', 'id');			$supports_map = array(					'placeholder' => array('text','email','password','textarea'),					'value' => array('text','password','email','submit','checkbox'),					'size' => array('select'),					'cols' => array('textarea'),					'rows' => array('textarea')			);			foreach($supports_map as $attr_key=>$ls){				if(in_array($field['type'], $ls)){					array_push($supports, $attr_key);				}			}			$attrs = array();			foreach($field as $attr_key=>$val){				if(in_array($attr_key, $supports) && is_scalar($val)){					$val = str_replace('"', '\\"', $val);					array_push($attrs, $attr_key.'='.'"'.$val.'"');				}			}			return implode(' ', $attrs);		};		/**		 * build a php template with given envarionment data		 * @param  string $str		 * @param  array $data		 * @return string		 */		$build_tpl = function($str, $data, $debug=false){			$str = str_replace('"','\\"',$str);			extract($data);			if($debug){				dump(';$a = "'.$str.'"; ');			}			eval(';$a = "'.$str.'"; ');			return $a;		};		$found_submit = false;		$fields_html = '';		foreach($fields as $name=>$field){			if(!$name){				throw new Exception('NO FORM FIELD NAME GIVEN');			}			if($field['type'] == 'submit'){				$found_submit = true;			}			$field['name'] = $name;			$field['label'] = $field['type'] != 'submit' ? ($field['label'] ?: $name) : null;			$field['type'] = $field['type'] ?: 'text';			$field['id'] = $field['type'] != 'radio' ? ($field['id'] ?: '_form_'.$name) : null;			$field['attr_str'] = $build_attr($field);			$item_tpl = $field['item_tpl'] ?: '';			if(!$item_tpl){				switch($field['type']){					case 'textarea':						$item_tpl = '<textarea $attr_str>$value</textarea>';						break;					case 'select':						$item_tpl = '<select size="1" $attr_str>';						foreach($field['options'] as $val=>$label){							$item_tpl .=							'<option value="'.$val.'" '.((isset($field['value']) && ($field['value'] == $val)) ? 'selected':'').'>'.							$label.							'</option>';						}						$item_tpl .= '</select>';						break;					case 'radio':						$item_tpl = '';						foreach($field['options'] as $val=>$label){							$id = $name.'_radio_'.$val;							$item_tpl .= '<input type="radio" id="'.$id.'" value="'.$val.'" $attr_str '.((isset($field['value']) && ($field['value'] == $val)) ? 'checked="checked"':'').'/>';							$item_tpl .= '<label for="'.$id.'">$options['.$val.']</label>';						}						break;					case 'hidden':						$item_tpl = '<input type="hidden" name="$name" value="$value" />';						break;					case 'checkbox':					case 'file':					case 'text':					case 'password':					case 'submit':					case 'email':					default:						$item_tpl = '<input $attr_str/>';						break;				}			}			//build element html			$element = $build_tpl($item_tpl, $field);			//merge			$tmp = array_merge(array('element'=>$element), $field);			//build field html			$fields_html .= $build_tpl($form_option['field_tpl'], $tmp);		}		if($found_submit || !$form_option['add_submit']){			$form_option['submit_html'] = '';		}		$tmp = array_merge($form_option, array('fields_html' => $fields_html));		$con_tpl = $build_tpl($form_option['container_tpl'], $tmp);		return $con_tpl;	}	/**	 * 表格输出	 * @param array $data 数据	 * @param array $fields 显示key集合	 * @param array $option 选项	 * @return string html字符串	 **/	public static function genTable($data, array $fields=array(), array $option=array()){		$tmp = array_slice($data, 0, 1);		$first = array_pop($tmp);		if(!is_array($data) || !is_array($first) || count($data) == 0){			return '';		}		$fields = $fields ?: array_combine(array_keys($first), array_keys($first));		$option = array_merge(array(				'class' => 'tbl',				'id' => '',				'style' => '',				'summary' => '',				'caption' => '',				'manage' => array(					'checkbox' => function($item){						return '<input type="checkbox" name="ids[]" value="'.$item['id'].'"/>';					},					'batchDeleteAction' => function($item){						return '';					},					'deleteAction' => function($item){						return '';					},					'modifyAction' => function($item){						return '';					}				)		), $option);		$attstr = array();		foreach(array('class','style','summary','id') as $cp){			if($option[$cp]){				array_push($attstr, $cp.'="'.$option[$cp].'"');			}		}		$html = '<table '.implode(' ', $attstr).'>';		$html .= $option['caption'] ? "<caption>$option[caption]</caption>" : '';		//colgroup		$html .= '<colgroup>';		foreach(array_keys($fields) as $k){			$html .= "<col class=\"$option[class]_col_$k\">";		}		$html .= '</colgroup>';		//head field		if(!isAssocArray($first)){			$html .= '<thead><tr>';			foreach($fields as $field){				if(is_function($field)){					$html .= '<th>'.$field(null).'</th>';				} else {					$html .= '<th>'.$field.'</th>';				}			}			$html .= '</head>';		}		//data fields		$html .= '<tbody>';		foreach($data as $item){			$html .= '<tr>';			foreach($fields as $k=>$v){				if(is_function($v)){					$html .= '<td>'.$v($item).'</td>';				} else {					$html .= '<td>'.$item[$k].'</td>';				}			}			$html .= '</tr>';		}		$html .= '</tbody>';		if($option['tfoot']){			$cols = count($fields);			$html .= '<tfoot><tr><td colspan="'.$cols.'">'.$option['tfoot'].'</td></tr></tfoot>';		}		$html .= '</table>';		return $html;	}	/**	 * get jsonp format	 * @param mix $data	 * @param string $callback	 * @return string	 */	public static function getJsonp($data, $callback='callback'){		return $callback.'('.json_encode($data).');';	}	/**	 * get iframe response	 * @param mix $data	 * @param string $callback	 * @return string	 */	public static function getIframeResponse($data, $callback='callback'){		return '<!doctype html><html lang="en"><head><meta charset="UTF-8" /><title>iframe response</title>'.			'<script>window.frameElement.'.$callback.'('.json_encode($data).');</script>'.			'</head><body></body></html>';	}	public function print_exception($exception){		$msg = $exception->getMessage();		$code = $exception->getCode();		$file = $exception->getFile();		$line = $exception->getLine();		echo "<b style=\"font-size:24px\">$msg<br/>[$code]</b><br/>";		echo $file." [$line]";		echo '<pre style="font-size:12px; color:gray">';		dump($exception);	}}