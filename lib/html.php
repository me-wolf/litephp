<?php/** * 调用js路径 * @param string $file_name * @return string**/function js_url($file_name){	return JS_URL.$file_name;}/** * 调用css路径 * @param string $file_name * @return string**/function css_url($file_name){	return CSS_URL.$file_name;}/** * 调用img路径 * @param string $file_name * @return string**/function img_url($file_name){	return IMG_URL.$file_name;}/** * 构造javascript结构 * @param string||array $js * @return string **/function js($js/**, $js2, $js3...*/){	$args = func_get_args();	$rst = '';	foreach($args as $js){		if(gettype($js) == 'string'){			if(stripos('/', $js) === false){				$js = js_url($js);			}			$rst .= '<script type="text/javascript" src="'.$js.'" charset="utf-8"></script>';		} else {			$sc = '<script type="text/javascript"';			foreach($js as $pro=>$val){				if(strtolower($pro) == 'src' && stripos('/', $val) === false){					$val = js_url($val);				}				$sc .= " $pro=\"$val\"";			}			$sc .= '></script>';			$rst .= $sc;		}	}	return $rst;}/** * 构造css结构 * @param string||array $css * @return string**/function css(){	$args = func_get_args();	$rst = '';	foreach($args as $css){		if(gettype($css) == 'string'){			if(stripos('/', $css) === false){				$css = css_url($css);			}			$rst .= '<link rel="stylesheet" type="text/css" href="'.$css.'" media="all"/>';		} else {			$lnk = '<link rel="stylesheet" type="text/css"';			foreach($js as $pro=>$val){				if(strtolower($pro) == 'href' && stripos('/', $val) === false){					$val = css_url($val);				}				$lnk .= " $pro=\"$val\"";			}			$lnk .= '/>';			$rst .= $lnk;		}	}	return $rst;}/** * 输出img * @param string $src * @param array $option * @return string **/function img($src, $option=array()){	$exts = '';	$adjust = false;	$adjust_fun = '__img_adjust__';	foreach($option as $key=>$val){		$exts .= " $key=\"$val\"";		if(preg_match("/(minHeight|minWidth|maxHeight|maxWidth)/i", $key)){			$adjust = true;		}	}	return "<img src=\"$src\"$exts".($adjust ? " onload=\"$adjust_fun\"" : "")."/>";};/** * build a form * @param string $url * @param array $fields * @param array $option * @return string **/function form($url='', array $fields, array $option=array()){	$option = array_merge(array(		'method' => 'post',		'submitTitle' => '保存',		'container_tpl' =>			'<form action="$url" method="$method">'.				'$fields_html'.				'<input type="submit" value="$submitTitle" class="btn"/>'.			'</form>',		'field_tpl' =>			'<dl><dt><label for="$id">$label</label></dt><dd>$element</dd></dl>'	), $option);	$method = $option['method'];	$submitTitle = $option['submitTitle'];	$fields_html = '';	$fields_html = '';	$fi_tpl = str_replace('"','\\"',$option['field_tpl']);	foreach($fields as $field){		$name = $field['name'];		if(!$name){			throw new Exception('NO FORM FIELD NAME GIVEN');		}		$id = '_form_'.$name;		$label = $field['label'] ?: $name;		$type = $field['type'] ?: 'text';		$value = $field['value'] ?: '';		$placeholder = $field['placeholder'] ?: '';		$item_tpl = '';		switch($type){			case 'textarea':				$item_tpl = '<textarea name="$name" id="$id">$value</textarea>';				break;			case 'select':				$item_tpl = '<select size="1" id="$id" name="$name">';				foreach($field['options'] as $option){					$item_tpl .= '<option value="'.$option['value'].'">'.($option['label'] ?: $option['value']).'</option>';				}				$item_tpl .= '</select>';				break;			case 'radio':				break;			case 'checkbox':				break;			case 'file':				$item_tpl = '<input type="file" name="$name" id="$id"/>';				break;			case 'text':			case 'password':			default:				$item_tpl = '<input type="$type" name="$name" id="$id" value="$value"'.					($placeholder ? ' placeholder="$placeholder"':'').'/>';				break;		}		$item_tpl = str_replace('"','\\"',$item_tpl);		eval('$element = "'.$item_tpl.'";');		eval('$fields_html .= "'.$fi_tpl.'";');	}	$con_tpl = str_replace('"','\\"',$option['container_tpl']);	eval('$html = "'.$con_tpl.'";');	return $html;}/** * 表格输出 * @param array $data 数据 * @param array $fields 显示key集合 * @param array $option 选项 * @return string html字符串 **/function table($data, array $fields=array(), array $option=array()){	$tmp = array_slice($data, 0, 1);	$first = array_pop($tmp);	if(!is_array($data) || !is_array($first) || count($data) == 0){		return '';	}	$fields = $fields ?: array_combine(array_keys($first), array_keys($first));	$option = array_merge(array(		'class' => 'tbl',		'style' => '',		'summary' => '',		'caption' => '',		'tfoot' => ''		//tfoot 扩展	), $option);	$attstr = '';	foreach($option as $k=>$v){		if(!empty($v) && $v != 'caption' && is_scalar($v)){			$attstr .= "$k=\"$v\"";		}	}	$html = '<table'.($attstr ? ' '.$attstr : '').'>';	$html .= $option['caption'] ? "<caption>$config[caption]</caption>" : '';	//colgroup	$html .= '<colgroup>';	foreach(array_keys($fields) as $k){		$html .= "<col class=\"$config[class]_col_$k\">";	}	$html .= '</colgroup>';	//head field	if(!isAssocArray($first)){		$html .= '<thead><tr>';		foreach($fields as $field){			if(is_function($field)){				$html .= '<th>'.$field(null).'</th>';			} else {				$html .= '<th>'.$field.'</th>';			}		}		$html .= '</head>';	}	//data fields	$html .= '<tbody>';	foreach($data as $item){		$html .= '<tr>';		foreach($fields as $k=>$v){			if(is_function($v)){				$html .= '<td>'.$v($item).'</td>';			} else {				$html .= '<td>'.$item[$k].'</td>';			}		}		$html .= '</tr>';	}	$html .= '</tbody>';	if($option['tfoot']){		$cols = count($first);		$html .= '<tfoot><tr><td colspan="'.$cols.'">'.$option['tfoot'].'</td></tr></tfoot>';	}	$html .= '</table>';	return $html;}